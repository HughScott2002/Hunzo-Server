services:
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:4.0
    ports:
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559" # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  broker:
    image: apache/kafka:3.7.0
    container_name: kafka
    # volumes:
    #   - kafka_data:/opt/kafka/data
    #   - kafka_logs:/opt/kafka/logs
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server broker:9092",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 15s
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_CONTROLLER_LISTENER_NAMES}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CONTROLLER_QUORUM_VOTERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
      # KAFKA_LOG_DIRS: "/opt/kafka/logs"
      # KAFKA_DATA_DIRS: "/opt/kafka/data"

  nginx:
    image: nginx:1.27.2-alpine
    container_name: nginx
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./0-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - user-service
      - wallet-service

  user-service:
    container_name: user-service
    build: ./1-users
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_INTERNAL_PORT}"
    depends_on:
      # - broker
      # - user-redis
      broker:
        condition: service_healthy
      user-redis:
        condition: service_started
      user-cassandra:
        condition: service_healthy
    restart: always
    environment:
      - USER_REDIS_PASSWORD=${USER_REDIS_PASSWORD}
      - USER_REDIS_PORT=${USER_REDIS_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - MODE=${MODE}
  notification-service:
    container_name: notification-service
    image: fastapi_app:latest
    build:
      context: ./2-notification
      target: development # or 'production' for prod
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_INTERNAL_PORT}"
    environment:
      - TESTING_NOTIFICATION_SERVICE_SMTP_HOST=${TESTING_NOTIFICATION_SERVICE_SMTP_HOST}
      - TESTING_NOTIFICATION_SERVICE_SMTP_PORT=${TESTING_NOTIFICATION_SERVICE_SMTP_PORT}
      - NOTIFICATION_SERVICE_KAFKA_BOOTSTRAP_SERVERS=broker:9092
      - NOTIFICATION_SERVICE_KAFKA_TOPIC=${NOTIFICATION_SERVICE_KAFKA_TOPIC}
      - ENV=development
      - PORT=${NOTIFICATION_SERVICE_INTERNAL_PORT}
    depends_on:
      - mailhog
      - broker
    networks:
      - app-network

  wallet-service:
    container_name: wallet-service
    build: ./3-wallet
    ports:
      - "${WALLET_SERVICE_PORT}:${WALLET_SERVICE_INTERNAL_PORT}"
    depends_on:
      # - broker
      # - wallet-redis
      broker:
        condition: service_healthy
      wallet-redis:
        condition: service_started
      wallet-cassandra:
        condition: service_healthy
    restart: on-failure:3
    environment:
      - WALLET_REDIS_PASSWORD=${WALLET_REDIS_PASSWORD}
      - WALLET_REDIS_PORT=${WALLET_REDIS_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - MODE=${MODE}
      - KAFKA_RETRY_ATTEMPTS=5
      - KAFKA_RETRY_DELAY=2

  user-redis:
    image: redis:alpine
    container_name: user-redis
    ports:
      - "${USER_REDIS_PORT}:6379"
    volumes:
      - user_redis_data:/data
    restart: always
    command: redis-server --appendonly yes --requirepass ${USER_REDIS_PASSWORD}

  wallet-redis:
    image: redis:alpine
    container_name: wallet-redis
    ports:
      - "${WALLET_REDIS_PORT}:6379"
    volumes:
      - wallet_redis_data:/data
    restart: always
    command: redis-server --appendonly yes --requirepass ${WALLET_REDIS_PASSWORD}

  user-cassandra:
    image: cassandra:4.1
    container_name: user-cassandra
    ports:
      - "${USER_CASSANDRA_PORT}:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=${USER_CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_KEYSPACE=${USER_CASSANDRA_KEYSPACE}
      - CASSANDRA_DC=${USER_CASSANDRA_DC}
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
      - MODE=${MODE}
      - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - user_cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "nodetool status | grep UN"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: always

  wallet-cassandra:
    image: cassandra:4.1
    container_name: wallet-cassandra
    ports:
      - "${WALLET_CASSANDRA_PORT}:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=${WALLET_CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_KEYSPACE=${WALLET_CASSANDRA_KEYSPACE}
      - CASSANDRA_DC=${WALLET_CASSANDRA_DC}
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
      - MODE=${MODE}
      - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - wallet_cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "nodetool status | grep UN"]
      interval: 15s
      timeout: 10s
      retries: 10
    restart: always

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  user_redis_data:
  wallet_redis_data:
  user_cassandra_data:
  wallet_cassandra_data:
  # Or if you need to persist docker.sock data
  # docker_sock:
